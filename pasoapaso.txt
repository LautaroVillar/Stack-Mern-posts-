---------------------------------------------------PASOS DE BACKEND-----------------------------------------------------------------------
El primer paso es ejectutar el comando npm init -y, esto lo que hace es crear un archivo package.json que nos va a servir para listar las dependecias y dar informacion de nuestro proyecto.
El segundo paso es instalar los modulos, es este caso, instalamos express (npm i express), el cual es un framework de node que me va permitir poder crear rutas o urls que yo despues voy a poder pedir desde el frontend o desde cualquier aplicacion cliente, tambien va a utilizar (express-fileupload) que es un modulo extra que se le añade a express(es un middleware) y el cual nos permite subir cualquier tipo de archivo, en este proyecto lo vamos a utilizar para subir imagenes, luego instalamos otro modulo que nos permite conectar a mongodb (mongoose) y tambien nos permite definir un esquema con el cual vamos a validar los datos. Ademas de todo esto vamos a instalar modulos secundarios, como (dotenv) que nos permite crear variables de entorno en nuestra aplicacion para que no tengamos que estar tipeando la url de nuestra base de datos en codigo sino que vamos a estar guardandola en una variable, otro modulo que vamos a instalar es (fs-extra) el cual nos permite crear o manipular archivos del sistema, lo vamos a utlizar para renombrar, borrar o mover las imagenes, tambien instalamos (http-erros) que nos permite enviar mensajes de error personalizados al cliente en caso de que ocurrran y instalamos (morgan) que nos permite ver por consola las peticiones que van llegando.
Tercer paso es instalar un servicio que se llama cloudinary (npm i cloudinary), este modulo nos va a permitir utilizar un servicio para subir las imagenes.
Cuarto paso, creamos nuestra carpeta server y adentro un archivo index.js, el cual va a ser el archivo principal que va arrancar todo mi servidor.
Quinto paso, para que node soporte la sintaxis de import y export debo ir a package.json y debajo de main creo una propiedad llama "type": "module".
Sexto paso, instalamos otro modulo que nos permite refrescar el servidor o reiniciar el servidor cada vez que hacemos cambios (npm i nodemon -D), entonces cada vez que yo hago un cambio en el servidor lo va a reiniciar.Debemos ir a package.json, quitar el comando test que esta dentro de scripts y agregar un comando "dev":"nodemon server/index.js" y lo ejecutamos con npm run dev.
Septimo paso, vamos a  crear rutas para nuestro servidor, dentro de server creamos una carperta routes, aca vamos a definir las url que nuestro frontend va a pedir, creamos el archivo post.routes.js donde van a ir todas las urls de las publicaciones, importamos desde index.js las rutas, para poder utilizar las url.Dentro de post.routes creamos 5 rutas que nos va a permitir hacer distintas peticiones,get me va a delvolver un arreglo de publiaciones, post me va a permitir realizar una peticion nueva al cliente, tambien tenemos el metodo put que nos permite actuzalizar una peticion, el metodo delete que nos permite eliminar una publicacion, volvemos a utlizar el metodo get pero en este caso a la url le agregamos :id, el cual nos permite obtener una sola publicacion.
Octavo paso, para hacer las diferentes peticiones necesitamos un cliente rest y para eso instalamos una extesion en visual que se llama Thunder Client, que nos permite hacer las peticiones http.
Noveno paso, creamos una carpeta que se va a llamar controllers, en la cual vamos a almacenar las funciones que luego vamos a exportar y utilizar en posts.routes.
Decimo paso, vamos a crear una conexion con nuestra base de datos, creamos un archivo dentro de la carpeta server llamado db.js y importamos mongoose y utilizamos el metodo connect el cual recibe una direccion uri, este metodo connect es asincrono asi que utilizamos el async y await, tambien utlizamos un try catch para asegurarnos de que si algo sale mal pueda devolver un error.(db.connection.name) este comando me va a permitir ver el nombre de la base de datos, en lugar de escribir la url de mi base de datos en el arhivo db, la voy a llevar a una variable de entorno que es una variable que se guarda en el sistema, esto quiere decir que si subimos el codigo esta variable no se va a subir, creamos un archivo llamado .env y colocamos nuestra variable de entorno. Luego importamos el modulo que descargamos llamado dotenv, este modulo lo que nos permite es leer los arhivos .env que esta en nuesto proyecto y para utlizar la variable siempre se le añade al inicio process.env(es como decir que queremos todas las variables de entorno que estan en el sistema).
Paso onceavo, vamos a estructurar mejor nuestro proyecto, para esto en la carpeta server creamos un nuevo archivo llamado config.js, en donde va estar dotenv, en donde lo unico que va hacer esto es cargar las variables de entorno, ademas este archivo .env lo vamos a poner en el archivo gitignore.
Pso doceavo, ahora vamos a utlizar mongoose no para modelar si para ver que datos vamos estar guardando en la base de datos, creamos una carpeta llamada models dentro de la carpeta server y dentro de estar carpeta models creamos un archivo que va a contener todo lo que carguemos en nuestra base de datos, lo vamos a llamar post.js. Utilizamos el objeto Schema que recibe un objeto como parametro en el cual le vamos a pasar las propiedades que queremos guardar.
Paso trece, vamos a seguir mejorando el orden de las cosas y para esto creamos un archivo dentro de la carpeta server llamado app.js, en donde vamos a poner toda la configuracion de express, para que el index.js solo se encargue de arrancar el codigo.
Paso 14, vamos a utilizar nuestro modelo de publicacion para devolverle cosas al cliente, vamos a trabajar en la carpeta controllers, en donde vamos a ir rellenando las diferentes funciones de las petciones. Entramos en app. js y importamos desde el modulo el express el metodo json (app.use(express.json())) entonces cuando el cliente me envie algo lo puede entender y lo tengo que poner por encima de las routes.
Paso 15, en el paso anterior configuramos nuestros controladores que nos permiten operar con nuestar base de datos y ya estaria nuestro CRUD, lo que vamos hacer ahora es agregar mas codigo para prevenir algun fallo de nuestro controladores, entonces si yo quiero validar cuando pase algo mal, debo poner todas las consultas dentro del try y catch, ya que puedo capturar cuando una de las funciones falla.
Paso 16, vamos a tipear codigo para poder subir una imagen, para poder hacerlo tenemos que añadir un modulo a nuestro servidor para que pueda procesarlo, vamos a utlizar express-fileupload en el archivo app.js.
---------------------------------------------------PASOS DE FRONTEND-----------------------------------------------------------------------